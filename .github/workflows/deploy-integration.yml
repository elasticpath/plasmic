name: Deploy to Integration

on:
  push:
    branches:
      - master
    paths:
      - 'platform/wab/**'
      - 'terraform/**'
      - '.github/workflows/deploy-integration.yml'
      - '.github/workflows/deploy-frontend.yml'
  # Allow manual trigger for infrastructure apply
  workflow_dispatch:
    inputs:
      apply_infrastructure:
        description: 'Apply infrastructure changes'
        required: true
        type: boolean
        default: false

jobs:
  build-and-plan:
    name: Build Docker Image and Plan Infrastructure
    runs-on: ubuntu-latest
    # Only run on push events (not manual workflow_dispatch for apply)
    if: github.event_name == 'push'
    environment: integration
    permissions:
      contents: read   # Read repo contents
      id-token: write  # Required for AWS OIDC authentication

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Mask ECR registry URL
        run: |
          echo "::add-mask::${{ steps.login-ecr.outputs.registry }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Mask sensitive values
          echo "::add-mask::$ECR_REGISTRY"
          echo "::add-mask::$ECR_REPOSITORY"

          # Build the Docker image
          docker build \
            --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f platform/wab/Dockerfile \
            platform/

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.4

      - name: Generate Terraform configuration files
        uses: ./.github/actions/generate-terraform-configs
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          terraform_state_bucket: ${{ vars.TERRAFORM_STATE_BUCKET }}
          terraform_locks_table: ${{ vars.TERRAFORM_LOCKS_TABLE }}
          hosted_zone_id: ${{ vars.HOSTED_ZONE_ID }}
          hosted_zone_id_host: ${{ vars.HOSTED_ZONE_ID_HOST }}
          db_username: ${{ vars.DB_USERNAME }}

      - name: Plan infrastructure changes
        id: plan
        working-directory: terraform
        env:
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
        continue-on-error: true
        run: |
          # Make script executable
          chmod +x scripts/plan-infrastructure.sh

          echo "📋 Planning infrastructure changes..."
          echo "Environment: $ENVIRONMENT"
          echo ""

          # Run the plan script (exits with code 1 if changes detected)
          ./scripts/plan-infrastructure.sh $ENVIRONMENT || true

          # Check if plan files were created
          if [ -d "plans/$ENVIRONMENT" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload terraform plans
        if: steps.plan.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plans-${{ github.sha }}
          path: terraform/plans/${{ vars.ENVIRONMENT }}/
          retention-days: 7

      - name: Comment on infrastructure changes
        if: steps.plan.outputs.has_changes == 'true'
        run: |
          echo "### ⚠️ Infrastructure Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Terraform plans have been saved as artifacts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**To apply these changes:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the plan files in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Go to Actions → Deploy to Integration → Run workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Check 'Apply infrastructure changes' and run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  deploy-services:
    name: Deploy Services
    needs: build-and-plan
    runs-on: ubuntu-latest
    environment: integration
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.4

      - name: Generate Terraform configuration files
        uses: ./.github/actions/generate-terraform-configs
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          terraform_state_bucket: ${{ vars.TERRAFORM_STATE_BUCKET }}
          terraform_locks_table: ${{ vars.TERRAFORM_LOCKS_TABLE }}
          hosted_zone_id: ${{ vars.HOSTED_ZONE_ID }}
          hosted_zone_id_host: ${{ vars.HOSTED_ZONE_ID_HOST }}
          db_username: ${{ vars.DB_USERNAME }}

      - name: Deploy services
        working-directory: terraform
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          # Pass image tag via TF_VAR environment variable
          TF_VAR_container_image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
        run: |
          # Mask sensitive values
          echo "::add-mask::$ECR_REGISTRY"
          echo "::add-mask::$ECR_REPOSITORY"
          echo "::add-mask::$TF_VAR_container_image"

          # Make script executable
          chmod +x scripts/deploy-services.sh

          echo "🚀 Deploying services with image tag: $IMAGE_TAG"
          echo "Environment: $ENVIRONMENT"
          echo "Container image: $TF_VAR_container_image"
          echo ""

          # Run the deploy-services script
          ./scripts/deploy-services.sh $ENVIRONMENT

          echo "✅ Services deployed successfully!"

      - name: Deployment summary
        if: success()
        run: |
          echo "### ✅ Services Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Full SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed Services:**" >> $GITHUB_STEP_SUMMARY
          echo "- WAB" >> $GITHUB_STEP_SUMMARY
          echo "- Data" >> $GITHUB_STEP_SUMMARY
          echo "- Codegen" >> $GITHUB_STEP_SUMMARY
          echo "- Copilot (disabled)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Services Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details."

  apply-infrastructure:
    name: Apply Infrastructure Changes
    runs-on: ubuntu-latest
    # Only run on manual workflow_dispatch with apply_infrastructure=true
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.apply_infrastructure == 'true'
    environment: integration
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.4

      - name: Generate Terraform configuration files
        uses: ./.github/actions/generate-terraform-configs
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          terraform_state_bucket: ${{ vars.TERRAFORM_STATE_BUCKET }}
          terraform_locks_table: ${{ vars.TERRAFORM_LOCKS_TABLE }}
          hosted_zone_id: ${{ vars.HOSTED_ZONE_ID }}
          hosted_zone_id_host: ${{ vars.HOSTED_ZONE_ID_HOST }}
          db_username: ${{ vars.DB_USERNAME }}

      - name: Download terraform plans
        uses: actions/download-artifact@v4
        with:
          name: terraform-plans-${{ github.sha }}
          path: terraform/plans/${{ vars.ENVIRONMENT }}/

      - name: Apply infrastructure changes
        working-directory: terraform
        env:
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
        run: |
          # Make script executable
          chmod +x scripts/apply-infrastructure.sh

          echo "🚀 Applying infrastructure changes..."
          echo "Environment: $ENVIRONMENT"
          echo ""

          # Run the apply script
          ./scripts/apply-infrastructure.sh $ENVIRONMENT

          echo "✅ Infrastructure applied successfully!"

      - name: Deployment summary
        if: success()
        run: |
          echo "### ✅ Infrastructure Apply Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Infrastructure Apply Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details."
