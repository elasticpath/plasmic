name: Deploy Frontend to Integration

on:
  # Trigger after infrastructure deployment completes
  workflow_run:
    workflows: ["Deploy to Integration"]
    types:
      - completed
    branches:
      - master
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'integration'
        type: choice
        options:
          - integration
          - production

jobs:
  deploy-frontend:
    name: Build and Deploy Frontend
    # Only run if the infrastructure deployment succeeded or if manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: integration
    permissions:
      contents: read   # Read repo contents
      id-token: write  # Required for AWS OIDC authentication

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          echo "Disk space after cleanup:"
          df -h

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.4

      - name: Generate Terraform configuration files
        uses: ./.github/actions/generate-terraform-configs
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          terraform_state_bucket: ${{ vars.TERRAFORM_STATE_BUCKET }}
          terraform_locks_table: ${{ vars.TERRAFORM_LOCKS_TABLE }}
          hosted_zone_id: ${{ vars.HOSTED_ZONE_ID }}
          hosted_zone_id_host: ${{ vars.HOSTED_ZONE_ID_HOST }}
          db_username: ${{ vars.DB_USERNAME }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "yarn"
          cache-dependency-path: platform/wab/yarn.lock

      - name: Deploy frontend application
        working-directory: terraform
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || vars.ENVIRONMENT }}
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          # Get sensitive values from Terraform outputs and mask them
          cd projects/frontend
          terraform init -backend-config=config/${ENVIRONMENT}-backend.tfvars -reconfigure >/dev/null 2>&1

          FRONTEND_BUCKET=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "")
          HOST_BUCKET=$(terraform output -raw host_bucket_name 2>/dev/null || echo "")
          FRONTEND_CF_ID=$(terraform output -raw frontend_cloudfront_distribution_id 2>/dev/null || echo "")
          HOST_CF_ID=$(terraform output -raw host_cloudfront_distribution_id 2>/dev/null || echo "")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "")
          HOST_URL=$(terraform output -raw host_url 2>/dev/null || echo "")

          # Mask sensitive values
          [ -n "$FRONTEND_BUCKET" ] && echo "::add-mask::$FRONTEND_BUCKET"
          [ -n "$HOST_BUCKET" ] && echo "::add-mask::$HOST_BUCKET"
          [ -n "$FRONTEND_CF_ID" ] && echo "::add-mask::$FRONTEND_CF_ID"
          [ -n "$HOST_CF_ID" ] && echo "::add-mask::$HOST_CF_ID"
          [ -n "$FRONTEND_URL" ] && echo "::add-mask::$FRONTEND_URL"
          [ -n "$HOST_URL" ] && echo "::add-mask::$HOST_URL"

          cd ../..

          # Make script executable
          chmod +x scripts/deploy-frontend.sh

          echo "🎨 Deploying frontend application"
          echo "Environment: $ENVIRONMENT"
          echo "Region: $AWS_REGION"
          echo ""

          # Run the deploy-frontend script
          ./scripts/deploy-frontend.sh $ENVIRONMENT $AWS_REGION

          echo "✅ Frontend deployed successfully!"

      - name: Deployment summary
        if: success()
        run: |
          echo "### ✅ Frontend Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed Components:**" >> $GITHUB_STEP_SUMMARY
          echo "- React Studio frontend" >> $GITHUB_STEP_SUMMARY
          echo "- Host files (host.html, popup.html)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "### ❌ Frontend Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details."